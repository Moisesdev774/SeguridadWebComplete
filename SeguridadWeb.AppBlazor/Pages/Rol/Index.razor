@page "/rol/index"
@using SeguridadWeb.EntidadesDeNegocio
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<PageTitle>Gestión de Roles</PageTitle>

<h1>Gestión de Roles</h1>

<!-- Formulario de búsqueda -->
<div class="row mb-3">
    <div class="col-md-8">
        <input type="text" class="form-control" @bind="filtroNombre" placeholder="Buscar por nombre..." @oninput="BuscarRoles" />
    </div>
    <div class="col-md-2">
        <button class="btn btn-primary w-100" @onclick="BuscarRoles">Buscar</button>
    </div>
    <div class="col-md-2">
        <button class="btn btn-secondary w-100" @onclick="AbrirModalCrear">Crear Nuevo</button>
    </div>
</div>

<!-- Tabla de Roles -->
@if (roles == null || roles.Count == 0)

{
    <p>No se encontraron roles.</p>
}

else

{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rol in roles.Skip((paginaActual - 1) * top).Take(top))

            {
                <tr>
                    <td>@rol.Id</td>
                    <td>@rol.Nombre</td>
                    <td>
                        <button class="btn btn-info btn-sm me-1" @onclick="() => AbrirModalVer(rol)">Ver</button>
                        <button class="btn btn-success btn-sm me-1" @onclick="() => AbrirModalEditar(rol)">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminar(rol)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Paginación -->
    <div class="d-flex justify-content-between">
        <button class="btn btn-primary" @onclick="PaginaAnterior" disabled="@EsPrimeraPagina">Anterior</button>
        <button class="btn btn-primary" @onclick="PaginaSiguiente" disabled="@EsUltimaPagina">Siguiente</button>
    </div>
}

<!-- Modal Crear/Editar -->
<div class="modal fade @(IsModalVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle</h5>
                <button type="button" class="btn-close" @onclick="CerrarModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="rolNombre" class="form-label">Nombre</label>
                    <input type="text" class="form-control" id="rolNombre" @bind="rolSeleccionado.Nombre" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="GuardarRol">Guardar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Ver -->
<div class="modal fade @(IsModalVerVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ver Rol</h5>
                <button type="button" class="btn-close" @onclick="CerrarModalVer"></button>
            </div>
            <div class="modal-body">
                <p><strong>Nombre:</strong> @rolSeleccionado.Nombre</p>
                <p><strong>ID:</strong> @rolSeleccionado.Id</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CerrarModalVer">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Rol> roles = new();

    private Rol rolSeleccionado = new();

    private string filtroNombre = "";

    private bool IsModalVisible = false;

    private bool IsModalVerVisible = false;

    private string ModalTitle = "";



    private int top = 10;

    private int paginaActual = 1;



    private int totalPaginas => (int)Math.Ceiling((double)roles.Count / top);



    private bool EsPrimeraPagina => paginaActual == 1;

    private bool EsUltimaPagina => paginaActual == totalPaginas;



    protected override async Task OnInitializedAsync()

    {

        await CargarRoles();

    }



    private async Task CargarRoles()

    {

        roles = await Http.GetFromJsonAsync<List<Rol>>("Rol");

        CalcularPaginacion();

    }



    private async Task BuscarRoles()

    {

        var filtro = new { Nombre = filtroNombre };

        var respuesta = await Http.PostAsJsonAsync("Rol/Buscar", filtro);

        roles = await respuesta.Content.ReadFromJsonAsync<List<Rol>>();

        paginaActual = 1; // Reset pagination on new search

        CalcularPaginacion();

    }



    private void CalcularPaginacion()

    {

        // totalPaginas = (int)Math.Ceiling((double)roles.Count / top);

    }



    private async Task GuardarRol()

    {

        if (rolSeleccionado.Id == 0)

        {

            // Crear nuevo rol

            await Http.PostAsJsonAsync("Rol", rolSeleccionado);

        }

        else

        {

            // Editar rol existente

            await Http.PutAsJsonAsync($"Rol/{rolSeleccionado.Id}", rolSeleccionado);

        }

        await CargarRoles();

        CerrarModal();

    }



    private async Task ConfirmarEliminar(Rol rol)

    {

        await Http.DeleteAsync($"Rol/{rol.Id}");

        await CargarRoles();

    }



    private void AbrirModalCrear()

    {

        ModalTitle = "Crear Nuevo Rol";

        rolSeleccionado = new Rol();

        IsModalVisible = true;

    }



    private void AbrirModalEditar(Rol rol)

    {

        ModalTitle = "Editar Rol";

        rolSeleccionado = rol;

        IsModalVisible = true;

    }



    private void AbrirModalVer(Rol rol)

    {

        ModalTitle = "Ver Rol";

        rolSeleccionado = rol;

        IsModalVerVisible = true;

    }



    private void CerrarModal()

    {

        IsModalVisible = false;

    }



    private void CerrarModalVer()

    {

        IsModalVerVisible = false;

    }



    private void PaginaAnterior()

    {

        if (paginaActual > 1)

        {

            paginaActual--;

        }

    }



    private void PaginaSiguiente()

    {

        if (paginaActual < totalPaginas)

        {

            paginaActual++;

        }

    }
}
